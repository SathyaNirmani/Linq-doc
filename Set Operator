// the comparison is case-sensitive, 

string[] countries = { "USA", "usa", "INDIA", "UK", "UK" };

var result = countries.Distinct();

foreach (var v in result)
{
    Console.WriteLine(v); //Out  put = > USA,usa,INDIA,UK
}


// the comparison is not case-sensitive, 


string[] countries = { "USA", "usa", "INDIA", "UK", "UK" };

var result = countries.Distinct(StringComparer.OrdinalIgnoreCase);

foreach (var v in result)
{
    Console.WriteLine(v);//Out  put = > USA,INDIA,UK
}
}
/////////***************************************************************************************************
 
 /// Notice that in the output we don't get unique employees. This is because, 
///  the default comparer is being used which will just check for object references being equal and not the individual property values.

List<Employee> list = new List<Employee>()
{
    new Employee { ID = 101, Name = "Mike"},
    new Employee { ID = 101, Name = "Mike"},
    new Employee { ID = 102, Name = "Mary"}
};

var result = list.Distinct();

foreach (var v in result)
{
    Console.WriteLine(v.ID + "\t" + v.Name);///Out  put = >  101, Mike
                                                             101, Mike
                                                             102, Mary
}

//solving the problem
// Step 1
public class EmployeeComparer : IEqualityComparer<Employee>
{
    public bool Equals(Employee x, Employee y)
    {
        return x.ID == y.ID && x.Name == y.Name;
    }

    public int GetHashCode(Employee obj)
    {
        return obj.ID.GetHashCode() ^ obj.Name.GetHashCode();
    }
}

// Step 2 : Pass an instance of EmployeeComparer as an argument to Distinct() method

List<Employee> list = new List<Employee>()
{
    new Employee { ID = 101, Name = "Mike"},
    new Employee { ID = 101, Name = "Mike"},
    new Employee { ID = 102, Name = "Mary"}
};

var result = list.Distinct(new EmployeeComparer());

foreach (var v in result)
{
    Console.WriteLine(v.ID + "\t" + v.Name); ///Out  put = > 101, Mike
                                                             102, Mary
}
